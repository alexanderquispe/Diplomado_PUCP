{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c468c09d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 13. For Loop in Dictionary\n",
    "#Given a dictionary of student scores:\n",
    "#{\"Alice\": 85, \"Bob\": 92, \"Charlie\": 78, \"Diana\": 88}\n",
    "#Write a for loop to print each student's name along with their score."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "40ad2ea1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Alice: 85\n",
      "Bob: 92\n",
      "Charlie: 78\n",
      "Diana: 88\n"
     ]
    }
   ],
   "source": [
    "notas = {\"Alice\": 85, \"Bob\": 92, \"Charlie\": 78, \"Diana\": 88}\n",
    "\n",
    "for nombres, puntos in notas.items():\n",
    "    print(f\"{nombres}: {puntos}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1dc62b0a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Re-question: Modify the loop so that it only prints the names of students who scored above 80.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "0badb81c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Alice\n",
      "Bob\n",
      "Diana\n"
     ]
    }
   ],
   "source": [
    "notas = {\"Alice\": 85, \"Bob\": 92, \"Charlie\": 78, \"Diana\": 88}\n",
    "\n",
    "aprobados = [nombre for nombre, puntos in notas.items() if puntos > 80]\n",
    "print(\"\\n\".join(aprobados)) # La indicación señala solo hacer print a los nombres"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "92990bd5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 14. For Loop using Range\n",
    "# Write a for loop using range() to print all even numbers between 1 and 20."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7fb9d2c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n",
      "4\n",
      "6\n",
      "8\n",
      "10\n",
      "12\n",
      "14\n",
      "16\n",
      "18\n",
      "20\n"
     ]
    }
   ],
   "source": [
    "for numpar in range(2, 21, 2):\n",
    "    print(numpar)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eb7376b2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Re-question: How would you change the loop to also calculate the sum of these even numbers while iterating?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "c2aee785",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n",
      "4\n",
      "6\n",
      "8\n",
      "10\n",
      "12\n",
      "14\n",
      "16\n",
      "18\n",
      "20\n",
      "Suma: 110\n"
     ]
    }
   ],
   "source": [
    "# Versión 1\n",
    "total = 0\n",
    "for numpar in range(2, 21, 2):\n",
    "    print(numpar)\n",
    "    total += numpar\n",
    "print(\"Suma:\", total)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "0eba61bb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2 // suma acumulada: 2\n",
      "4 // suma acumulada: 6\n",
      "6 // suma acumulada: 12\n",
      "8 // suma acumulada: 20\n",
      "10 // suma acumulada: 30\n",
      "12 // suma acumulada: 42\n",
      "14 // suma acumulada: 56\n",
      "16 // suma acumulada: 72\n",
      "18 // suma acumulada: 90\n",
      "20 // suma acumulada: 110\n"
     ]
    }
   ],
   "source": [
    "# Versión 2\n",
    "total = 0\n",
    "for numpar in range(2, 21, 2):\n",
    "    total += numpar\n",
    "    print(f\"{numpar} // suma acumulada: {total}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e9b2c923",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 15. Iterations over Pandas (ENAHO dataset) [2 pts]\n",
    "# Suppose you are analyzing the National Household Survey (ENAHO) dataset, specifically the file ENAHO01A-2023-400.\n",
    "# The question of interest is P41601: “¿Cuánto fue el monto total por la compra o servicio?”.\n",
    "# Write a for loop that iterates over the column P41601 and prints values greater than 5000."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "b9c896b5",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Downloading...\n",
      "From (original): https://drive.google.com/uc?id=1NzUMx9cH58bui0ngKjfl9oyHoBvJKJLz\n",
      "From (redirected): https://drive.google.com/uc?id=1NzUMx9cH58bui0ngKjfl9oyHoBvJKJLz&confirm=t&uuid=45b56b05-7512-48a4-95a5-7bd6f6b62cf3\n",
      "To: C:\\Users\\Usuario\\ENAHO01A-2023-400.csv\n",
      "100%|███████████████████████████████████████████████████████████████████████████████| 221M/221M [00:46<00:00, 4.74MB/s]\n"
     ]
    }
   ],
   "source": [
    "# Primero hay que descargar el archivo.\n",
    "# Instala gdown\n",
    "%pip install -q gdown pandas\n",
    "\n",
    "import os, pandas as pd, gdown\n",
    "\n",
    "# Carpeta para guardar el CSV\n",
    "os.chdir(r\"C:\\Users\\Usuario\")\n",
    "\n",
    "# Enlace del archivo específico ENAHO01A-2023-400 \n",
    "file_url = \"https://drive.google.com/file/d/1NzUMx9cH58bui0ngKjfl9oyHoBvJKJLz/view?usp=drive_link\"\n",
    "\n",
    "# Nombre del archivo\n",
    "out = \"ENAHO01A-2023-400.csv\"\n",
    "\n",
    "# Descargamos el archivo\n",
    "gdown.download(file_url, out, quiet=False, fuzzy=True)\n",
    "\n",
    "# Leer el CSV\n",
    "df = pd.read_csv(out, sep=None, engine=\"python\", encoding=\"latin-1\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "08151168",
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "def parse_number(x):\n",
    "    if pd.isna(x): \n",
    "        return np.nan\n",
    "    s = str(x).strip().replace(\"\\u00A0\",\"\")\n",
    "    s = re.sub(r\"\\s+\", \"\", s)\n",
    "    # si hay comas/puntos: la marca decimal será la ÚLTIMA de ellas\n",
    "    if \",\" in s or \".\" in s:\n",
    "        last = max(s.rfind(\",\"), s.rfind(\".\"))\n",
    "        int_part  = re.sub(r\"[.,]\", \"\", s[:last])   # quita miles antes\n",
    "        frac_part = re.sub(r\"[.,]\", \"\", s[last+1:]) # quita miles en decimales\n",
    "        s = int_part + \".\" + frac_part             # decimal uniforme con punto\n",
    "    return s\n",
    "\n",
    "s_num = pd.to_numeric(df[\"P41601\"].map(parse_number), errors=\"coerce\")\n",
    "df[\"P41601_num\"] = s_num"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "096553fb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "99999.9\n",
      "99999.9\n",
      "99999.9\n",
      "99999.9\n",
      "99999.9\n",
      "99999.9\n",
      "99999.9\n",
      "99999.9\n",
      "99999.9\n",
      "99999.9\n",
      "99999.9\n",
      "99999.9\n",
      "99999.9\n",
      "99999.9\n",
      "99999.9\n",
      "99999.9\n",
      "99999.9\n",
      "99999.9\n",
      "99999.9\n",
      "99999.9\n",
      "99999.9\n",
      "99999.9\n",
      "99999.9\n",
      "99999.9\n",
      "99999.9\n",
      "99999.9\n",
      "99999.9\n",
      "99999.9\n",
      "99999.9\n",
      "99999.9\n",
      "99999.9\n",
      "99999.9\n",
      "99999.9\n",
      "99999.9\n",
      "99999.9\n",
      "99999.9\n",
      "99999.9\n",
      "99999.9\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "for valores in pd.to_numeric(df[\"P41601\"], errors=\"coerce\").dropna():\n",
    "    if valores > 5000:\n",
    "        print(valores)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6473df6b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Re-question: How would you optimize this task using pandas vectorized operations (e.g., boolean indexing) instead of a for loop, to make the analysis faster and more efficient?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "23f5e442",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Count: 38\n",
      "784       99999.9\n",
      "794       99999.9\n",
      "797       99999.9\n",
      "799       99999.9\n",
      "3925      99999.9\n",
      "5731      99999.9\n",
      "7555      99999.9\n",
      "8007      99999.9\n",
      "13958     99999.9\n",
      "17211     99999.9\n",
      "26244     99999.9\n",
      "26639     99999.9\n",
      "28578     99999.9\n",
      "36256     99999.9\n",
      "43753     99999.9\n",
      "43754     99999.9\n",
      "45170     99999.9\n",
      "47369     99999.9\n",
      "48779     99999.9\n",
      "49699     99999.9\n",
      "52736     99999.9\n",
      "53781     99999.9\n",
      "66071     99999.9\n",
      "71331     99999.9\n",
      "75239     99999.9\n",
      "76090     99999.9\n",
      "80685     99999.9\n",
      "84911     99999.9\n",
      "87190     99999.9\n",
      "92416     99999.9\n",
      "96582     99999.9\n",
      "99087     99999.9\n",
      "103332    99999.9\n",
      "104854    99999.9\n",
      "107255    99999.9\n",
      "107757    99999.9\n",
      "109416    99999.9\n",
      "110537    99999.9\n"
     ]
    }
   ],
   "source": [
    "mask = df[\"P41601_num\"].gt(5000) # comparación vectorizada    \n",
    "valores = df.loc[mask, \"P41601_num\"]\n",
    "\n",
    "print(\"Count:\", mask.sum())\n",
    "print(valores.to_string(index=True))     # hace print y muestra el índice de cada valor seleccionado"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
